{"version":3,"sources":["task.js","taskmanager.js","script.js"],"names":["Task","id","title","description","assignedTo","date","time","status","TaskManager","tasks","taskId","parseInt","localStorage","getItem","setItem","task","push","mynewtasks","JSON","parse","stringify","splice","findTaskIndex","refreshPage","clearAllFieldValues","clearValidations","statusStats","taskIndex","i","length","taskTitle","document","querySelector","taskDescription","taskAssignedTo","taskDueDate","taskDueTime","done","review","inProgress","toDo","newToDo","openNewTask","taskForm","taskContainer","taskModalForm","taskManager","addEventListener","event","value","classList","add","checked","remove","saveButtonClicked","preventDefault","selectedStatus","validationTaskForm","item","addTask","editTask","$","modal","alert","formCancel","formClose","validation","notEmptyLongerThan","today","todayConvertor","dueDate","Date","target","setHours","boolean","number","counterTotalTask","totalNumber","getAllTask","clearAll","forEach","addTaskToPage","innerHTML","counterDone","filterTaskStatus","counterInReview","counterInProgress","counterToDo","findIndex","taskInArray","filter","window","html","taskElement","createRange","createContextualFragment","editTaskOnPage","deleteTaskOnPage","deleteTask","closest","checkbox","clearSelected","checkboxClicked","removeEventListener","append","tooltip","d","weekday","Array","day","getDay","months","todayMonth","getMonth","nth","n","todayDate","getDate","year","getFullYear","todayFullDate"],"mappings":";;AEAA;;;;AAEA;AACA,ADHA,ICGM8B,SAAS,GAAGC,QAAQ,CAACC,aAAT,CAAuB,YAAvB,CAAlB;AACA,IAAMC,eAAe,GAAGF,QAAQ,CAACC,aAAT,CAAuB,kBAAvB,CAAxB;AACA,IAAME,AFLelC,OACjB,OEIgB,GAAG+B,IFJP9B,EAAZ,EEI2B,AFJXC,CEIY8B,IFJ5B,EAAuB7B,OEIJ,CAAuB,GFJ1C,EAAoCC,UAApC,EEImB,AFJ6BC,CEIpD,GFJI,EAAsDC,IAAtD,EAA4DC,MAA5D,EAAoE;AEKxE,AFLwE,IEKlE4B,WAAW,GAAGJ,QAAQ,CAACC,aAAT,CAAuB,cAAvB,CAApB;AACA,IAAMI,WAAW,GAAGL,QAAQ,CAACC,aAAT,CAAuB,cAAvB,CAApB,EAEA;AFPQ,OAAK/B,EAAL,GAAUA,EAAV;AEQR,AFPQ,IEOFoC,GFPOnC,CEOH,GAAG6B,CFPL,GAAa7B,IEOA,CAAC8B,AFPd,aEOK,CAAuB,aAAvB,CAAb,EAAoD;AFN5C,OAAK7B,WAAL,GAAmBA,WAAnB;AEOR,AFNQ,IEMFmC,GFNOlC,GEMD,GAAG2B,IFNP,GAAkB3B,CEMH,CAAC4B,QFNhB,KEMO,CAAuB,eAAvB,CAAf,EAAwD;AFLhD,OAAK3B,IAAL,GAAYA,IAAZ;AEMR,AFLQ,IEKFkC,ADVe/B,GDKRF,IAAL,GEKQ,AFLIA,GEKDyB,CFLX,OEKmB,CAACC,aAAT,CAAuB,mBAAvB,CAAnB,EAAgE;AFJxD,ACLJ,ODKSzB,MAAL,GAAcA,MAAd,GCLU;ACUlB,AFJK,ACNa,ICUZiC,IAAI,GAAGT,QAAQ,CAACC,aAAT,CAAuB,aAAvB,CAAb,EAAoD;;AAEpD,ADXM,ICWAS,KDXKhC,ECWE,GAAGsB,ADXV,GAAW,EAAX,CADY,CAGZ,CCSkB,CAACC,aAAT,CAAuB,UAAvB,CAAhB,EAAoD;;AACpD,ADTM,ICSAU,KDTKhC,MCSM,ADTX,GCScqB,ADTApB,QCSQ,ADTA,CCSCqB,ADTApB,YAAY,CCSrB,ADTsBC,CCSC,MDTd,CAAqB,ICS9B,CAApB,EAAyD,CDT5B,CAAD,CAAR,IAA4C,CAA1D;AACAD,IAAAA,YAAY,CAACE,OAAb,CAAqB,QAArB,EAA8B,KAAKJ,MAAnC;ACSN,ADRK,ICQCiC,QAAQ,GAAGZ,QAAQ,CAACC,aAAT,CAAuB,WAAvB,CAAjB,EAAsD;;AAEtD,IAAMY,aAAa,GAAGb,QAAQ,CAACC,aAAT,CAAuB,QAAvB,CAAtB,EAAwD;;AACxD,IAAMa,aAAa,GAAGd,QAAQ,ADTlB7B,CCSmB8B,MDTZ7B,OCSG,CAAuB,KDTbC,MCSV,CAAtB,EAA2D,GDTfC,MAAMC,MAAMC,QAAO;ACW/D,ADXiE;ACYjE,ADXM,WAAKG,MAAL,GADyD,CAC1C;ACYrB;AACA,ADZM,UAAMK,IAAI,GAAG,IAAIf,aAAJ,CAAS,KAAKU,MAAd,EAAsBR,KAAtB,EAA6BC,WAA7B,EAA0CC,UAA1C,EAAsDC,IAAtD,EAA4DC,IAA5D,EAAkEC,MAAlE,CAAb,CAFyD,CAE+B;ACa9F;AACA,ADbM,WAAKE,KAAL,CAAWO,IAAX,CAAgBD,IAAhB,EAHyD,CAGlC;ACc7B,ADbM;ACcN,ADbM;ACcN,ADbM;ACcN,ADbM;ACcN,ADZM;ACcN;AACA,ADdMH,MAAAA,YAAY,CAACE,OAAb,CAAqB,QAArB,EAA+B,KAAKJ,MAApC;ACeN,ADdM,UAAIO,UAAU,GAAGC,IAAI,CAACC,KAAL,CAAWP,YAAY,CAACC,OAAb,CAAqB,SAArB,CAAX,KAA+C,EAAhE;ACgBN,ADfMI,MAAAA,UAAU,CAACD,IAAX,CAAgBD,IAAhB;ACgBN,ADfMH,MAAAA,YAAY,CAACE,OAAb,CAAqB,SAArB,EAAgCI,IAAI,CAACE,SAAL,CAAeH,UAAf,CAAhC;ACgBN,ADfK;ACgBL;AAEA;AACA,6BDjBaF,MAAK;ACkBlB,ADjBM,WAAKN,KAAL,CAAWY,MAAX,CAAkBC,aAAa,CAACP,IAAD,CAA/B,EAAsC,CAAtC,EAAwCA,IAAxC,EADY,CACmC;ACkBrD;AACA,ADlBMQ,MAAAA,WAAW,GAFC,CAEG;ACmBrB;AACA,ADnBMC,MAAAA,mBAAmB,GAHP,CAGW;ACoB7B;AAEA,ADrBMC,MAAAA,gBAAgB,GAJJ,CAIQ;ACsB1B;AACA,ADtBMC,MAAAA,WAAW,GALC,CAKG;ACuBrB,ADtBK;ACuBL;AACA;AAEA,+BDxBeX,MAAK;ACyBpB,ADxBM,UAAIY,SAAS,GAAGL,aAAa,CAACP,IAAD,CAA7B;ACyBN,ADxBM,UAAId,EAAE,GAAG,KAAKQ,KAAL,CAAWkB,SAAX,EAAsB1B,EAA/B;ACyBN,ADxBM,WAAKQ,KAAL,CAAWY,MAAX,CAAkBM,SAAlB,EAA4B,CAA5B,EAHc,CAGkB;ACyBtC,ADvBM;ACwBN;AACA,ADxBM,UAAIV,UAAU,GAAGC,IAAI,CAACC,KAAL,CAAWP,YAAY,CAACC,OAAb,CAAqB,SAArB,CAAX,CAAjB,CANc,CAOd;ACyBN;AACA,ADzBM,WAAK,IAAIe,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGX,UAAU,CAACY,MAA/B,EAAuCD,CAAC,EAAxC,EAA4C;AC0BlD,ADzBe,YAAIX,UAAU,CAACW,CAAD,CAAV,CAAc3B,EAAd,IAAoBA,EAAxB,EAA4B;AC0B3C,ADzBegB,UAAAA,UAAU,CAACI,MAAX,CAAkBO,CAAlB,EAAqB,CAArB;AC2Bf,AD1BehB,UAAAA,YAAY,CAACE,OAAb,CAAqB,SAArB,EAA+BI,IAAI,CAACE,SAAL,CAAeH,UAAf,CAA/B;AC2Bf,AD1Be;AC2Bf,AD1BW;AC2BX,AD1BO;AC2BP;AACA,AD1BMM,MAAAA,WAAW,GAhBG,CAgBC;AC2BrB;AACA,AD3BMG,MAAAA,WAAW,GAjBG,CAiBC;AC4BrB,AD3BK;AC4BL;AAEA;AACA;AACA;AAEA;;AAEA,IAAMoB,WAAW,GAAG,IAAItC,oBAAJ,CAAgBoC,aAAhB,CAApB,EAA0E;AAE1E;;AACAF,WAAW,CAACK,gBAAZ,CAA6B,OAA7B,EAAsC,UAASC,KAAT,EAAe;AAAE;AACrDxB,EAAAA,mBAAmB,GADgC,CAC5B;;AACvBC,EAAAA,gBAAgB,GAFmC,CAE/B;;AACpBK,EAAAA,SAAS,CAACmB,KAAV,GAAkBR,OAAO,CAACQ,KAA1B,CAHmD,CAGlB;;AACjC,MAAGnB,SAAS,CAACmB,KAAV,IAAmBnB,SAAS,CAACmB,KAAV,CAAgBpB,MAAhB,GAAyB,CAA/C,EAAiD;AAC/CC,IAAAA,SAAS,CAACoB,SAAV,CAAoBC,GAApB,CAAwB,UAAxB,EAD+C,CACV;AACtC,GAFD,MAEO;AACLrB,IAAAA,SAAS,CAACoB,SAAV,CAAoBC,GAApB,CAAwB,YAAxB,EADK,CACkC;AACxC;;AACDV,EAAAA,OAAO,CAACQ,KAAR,GAAgB,IAAhB,CATmD,CAS7B;AACvB,CAVD;;AAYA,SAASzB,mBAAT,GAA8B;AAAE;AAC9BM,EAAAA,SAAS,CAACmB,KAAV,GAAkB,IAAlB;AACAhB,EAAAA,eAAe,CAACgB,KAAhB,GAAwB,IAAxB;AACAf,EAAAA,cAAc,CAACe,KAAf,GAAuB,IAAvB;AACAd,EAAAA,WAAW,CAACc,KAAZ,GAAoB,IAApB;AACAb,EAAAA,WAAW,CAACa,KAAZ,GAAoB,IAApB;AAEAZ,EAAAA,IAAI,CAACe,OAAL,GAAe,KAAf;AACAd,EAAAA,MAAM,CAACc,OAAP,GAAiB,KAAjB;AACAb,EAAAA,UAAU,CAACa,OAAX,GAAqB,KAArB;AACAZ,EAAAA,IAAI,CAACY,OAAL,GAAe,IAAf;AACD;;AAED,SAAS3B,gBAAT,GAA2B;AAAE;AAC3BK,EAAAA,SAAS,CAACoB,SAAV,CAAoBG,MAApB,CAA2B,YAA3B,EAAyC,UAAzC;AACApB,EAAAA,eAAe,CAACiB,SAAhB,CAA0BG,MAA1B,CAAiC,YAAjC,EAA+C,UAA/C;AACAnB,EAAAA,cAAc,CAACgB,SAAf,CAAyBG,MAAzB,CAAgC,YAAhC,EAA8C,UAA9C;AACAlB,EAAAA,WAAW,CAACe,SAAZ,CAAsBG,MAAtB,CAA6B,YAA7B,EAA2C,UAA3C;AACD;;AAEDR,aAAa,CAACE,gBAAd,CAA+B,QAA/B,EAAyCO,iBAAzC,GAA6D;;AAE7D,SAASA,iBAAT,CAA2BN,KAA3B,EAAiC;AAC/BA,EAAAA,KAAK,CAACO,cAAN,GAD+B,CACP;;AACxB,MAAMrD,KAAK,GAAG4B,SAAS,CAACmB,KAAxB,CAF+B,CAEA;;AAC/B,MAAM9C,WAAW,GAAG8B,eAAe,CAACgB,KAApC;AACA,MAAM7C,UAAU,GAAG8B,cAAc,CAACe,KAAlC;AACA,MAAM5C,IAAI,GAAG8B,WAAW,CAACc,KAAzB;AACA,MAAM3C,IAAI,GAAG8B,WAAW,CAACa,KAAzB;AACA,MAAM1C,MAAM,GAAGiD,cAAc,EAA7B,CAP+B,CAOE;;AAEjC,MAAGC,kBAAkB,CAACvD,KAAD,EAAQC,WAAR,EAAqBC,UAArB,EAAiCC,IAAjC,EAAuCE,MAAvC,CAArB,EAAoE;AAAE;AACpE,QAAG,CAACoC,QAAQ,CAACO,SAAT,CAAmBQ,IAAnB,CAAwB,CAAxB,CAAJ,EAA+B;AAAE;AAC/BZ,MAAAA,WAAW,CAACa,OAAZ,CAAoBzD,KAApB,EAA2BC,WAA3B,EAAwCC,UAAxC,EAAoDC,IAApD,EAA0DC,IAA1D,EAAgEC,MAAhE,EAD6B,CAC4C;;AACzEgB,MAAAA,WAAW,GAFkB,CAEd;;AACfC,MAAAA,mBAAmB,GAHU,CAGN;;AACvBC,MAAAA,gBAAgB,GAJa,CAIT;;AACpBC,MAAAA,WAAW,GALkB,CAKf;AACf,KAND,MAMO;AACL,UAAMzB,EAAE,GAAG0C,QAAQ,CAACO,SAAT,CAAmBQ,IAAnB,CAAwB,CAAxB,CAAX,CADK,CACkC;;AACvC,UAAM3C,IAAI,GAAG;AAACd,QAAAA,EAAE,EAAFA,EAAD;AAAKC,QAAAA,KAAK,EAALA,KAAL;AAAYC,QAAAA,WAAW,EAAXA,WAAZ;AAAyBC,QAAAA,UAAU,EAAVA,UAAzB;AAAqCC,QAAAA,IAAI,EAAJA,IAArC;AAA2CC,QAAAA,IAAI,EAAJA,IAA3C;AAAiDC,QAAAA,MAAM,EAANA;AAAjD,OAAb;AACAuC,MAAAA,WAAW,CAACc,QAAZ,CAAqB7C,IAArB,EAHK,CAGuB;;AAC5BQ,MAAAA,WAAW,GAJN,CAIU;;AACfC,MAAAA,mBAAmB,GALd,CAKkB;;AACvBC,MAAAA,gBAAgB,GANX,CAMe;;AACpBC,MAAAA,WAAW,GAPN,CAOS;AAEhB;;AAEA,UAAIT,UAAU,GAAGC,IAAI,CAACC,KAAL,CAAWP,YAAY,CAACC,OAAb,CAAqB,SAArB,CAAX,CAAjB,CAXO,CAYP;;AACA,WAAK,IAAIe,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGX,UAAU,CAACY,MAA/B,EAAuCD,CAAC,EAAxC,EAA4C;AAC1C;AACA;AACA,YAAIX,UAAU,CAACW,CAAD,CAAV,CAAc3B,EAAd,IAAoBA,EAAxB,EAA4B;AAC1B;AACAgB,UAAAA,UAAU,CAACW,CAAD,CAAV,CAAc1B,KAAd,GAAsBA,KAAtB;AACAe,UAAAA,UAAU,CAACW,CAAD,CAAV,CAAczB,WAAd,GAA4BA,WAA5B;AACAc,UAAAA,UAAU,CAACW,CAAD,CAAV,CAAcxB,UAAd,GAA2BA,UAA3B;AACAa,UAAAA,UAAU,CAACW,CAAD,CAAV,CAAcvB,IAAd,GAAqBA,IAArB;AACAY,UAAAA,UAAU,CAACW,CAAD,CAAV,CAActB,IAAd,GAAqBA,IAArB;AACAW,UAAAA,UAAU,CAACW,CAAD,CAAV,CAAcrB,MAAd,GAAuBA,MAAvB;AACAK,UAAAA,YAAY,CAACE,OAAb,CAAqB,SAArB,EAAgCI,IAAI,CAACE,SAAL,CAAeH,UAAf,CAAhC;AACA;AACD;AACF;;AAED0B,MAAAA,QAAQ,CAACO,SAAT,CAAmBG,MAAnB,WAA6BpD,EAA7B,GA7BO,CA6B6B;AACnC;;AACD4D,IAAAA,CAAC,CAAC,eAAD,CAAD,CAAmBC,KAAnB,CAAyB,MAAzB,EAtCkE,CAsChC;AACnC,GAvCD,MAuCQ;AACNC,IAAAA,KAAK,CAAC,6BAAD,CAAL,CADM,CACgC;AACvC;;AACCxC,EAAAA,WAAW,GAnDkB,CAmDd;;AACfG,EAAAA,WAAW,GApDkB,CAoDd;AAClB;;AAED,IAAMsC,UAAU,GAACjC,QAAQ,CAACC,aAAT,CAAuB,eAAvB,CAAjB,EAA0D;;AAC1D,IAAMiC,SAAS,GAAClC,QAAQ,CAACC,aAAT,CAAuB,QAAvB,CAAhB,EAAkD;;AAElDgC,UAAU,CAACjB,gBAAX,CAA4B,OAA5B,EAAqC,UAASC,KAAT,EAAe;AAClD,MAAM/C,EAAE,GAAG0C,QAAQ,CAACO,SAAT,CAAmBQ,IAAnB,CAAwB,CAAxB,CAAX,CADkD,CACX;;AACvC,MAAIzD,EAAJ,EAAO;AACP0C,IAAAA,QAAQ,CAACO,SAAT,CAAmBG,MAAnB,WAA6BpD,EAA7B,GADO,CAC6B;AACnC;AACF,CALD;AAOAgE,SAAS,CAAClB,gBAAV,CAA2B,OAA3B,EAAoC,UAASC,KAAT,EAAe;AACjD,MAAM/C,EAAE,GAAG0C,QAAQ,CAACO,SAAT,CAAmBQ,IAAnB,CAAwB,CAAxB,CAAX,CADiD,CACV;;AACvC,MAAIzD,EAAJ,EAAO;AACP0C,IAAAA,QAAQ,CAACO,SAAT,CAAmBG,MAAnB,WAA6BpD,EAA7B,GADO,CAC6B;AACnC;AACF,CALD,GAOA;;AACA,SAASuD,cAAT,GAAyB;AAEvB,MAAInB,IAAI,CAACe,OAAT,EAAiB;AACf,WAAOf,IAAI,CAACY,KAAZ,CADe,CACI;AACpB,GAFD,MAEO,IAAIX,MAAM,CAACc,OAAX,EAAoB;AACzB,WAAOd,MAAM,CAACW,KAAd,CADyB,CACJ;AACtB,GAFM,MAEA,IAAIV,UAAU,CAACa,OAAf,EAAwB;AAC7B,WAAOb,UAAU,CAACU,KAAlB,CAD6B,CACJ;AAC1B,GAFM,MAEA,IAAIT,IAAI,CAACY,OAAT,EAAkB;AACvB,WAAOZ,IAAI,CAACS,KAAZ,CADuB,CACJ;AACpB,GAFM,MAEA;AACL,WAAO,KAAP;AACD;AACF,EAED;AAEA;;;AACAnB,SAAS,CAACiB,gBAAV,CAA2B,OAA3B,EAAoC,UAASC,KAAT,EAAe;AACjDkB,EAAAA,UAAU,CAACC,kBAAkB,CAAC,CAAD,CAAnB,CAAV;AACD,CAFD,GAIA;;AACAlC,eAAe,CAACc,gBAAhB,CAAiC,OAAjC,EAA0C,UAASC,KAAT,EAAe;AACvDkB,EAAAA,UAAU,CAACC,kBAAkB,CAAC,EAAD,CAAnB,CAAV;AACD,CAFD,GAIA;;AACAjC,cAAc,CAACa,gBAAf,CAAgC,OAAhC,EAAyC,UAASC,KAAT,EAAe;AACtDkB,EAAAA,UAAU,CAACC,kBAAkB,CAAC,CAAD,CAAnB,CAAV;AACD,CAFD,GAIA;;AACAhC,WAAW,CAACY,gBAAZ,CAA6B,OAA7B,EAAsC,UAASC,KAAT,EAAe;AACnD,MAAMoB,KAAK,GAAGC,cAAc,EAA5B,CADmD,CACnB;;AAChC,MAAMC,OAAO,GAAG,IAAIC,IAAJ,CAASvB,KAAK,CAACwB,MAAN,CAAavB,KAAtB,CAAhB,CAFmD,CAEL;;AAC9CiB,EAAAA,UAAU,CAACE,KAAK,IAAIE,OAAV,CAAV,CAHmD,CAGrB;AAC/B,CAJD,GAMA;;AACA,SAASD,cAAT,GAAyB;AACvB,MAAMD,KAAK,GAAG,IAAIG,IAAJ,EAAd,CADuB,CACG;;AAC1B,SAAOH,KAAK,CAACK,QAAN,CAAe,CAAf,EAAiB,CAAjB,EAAmB,CAAnB,EAAqB,CAArB,CAAP,CAFuB,CAES;AACjC,EAED;;;AACA,SAASP,UAAT,CAAoBQ,OAApB,EAA4B;AAC1B,MAAGA,OAAH,EAAW;AACT1B,IAAAA,KAAK,CAACwB,MAAN,CAAatB,SAAb,CAAuBG,MAAvB,CAA8B,YAA9B,EADS,CACoC;;AAC7CL,IAAAA,KAAK,CAACwB,MAAN,CAAatB,SAAb,CAAuBC,GAAvB,CAA2B,UAA3B,EAFS,CAE+B;AACzC,GAHD,MAGO;AACLH,IAAAA,KAAK,CAACwB,MAAN,CAAatB,SAAb,CAAuBG,MAAvB,CAA8B,UAA9B,EADK,CACsC;;AAC3CL,IAAAA,KAAK,CAACwB,MAAN,CAAatB,SAAb,CAAuBC,GAAvB,CAA2B,YAA3B,EAFK,CAEqC;AAC3C;AACF;;AAAA,EAED;;AACA,SAASgB,kBAAT,CAA6BQ,MAA7B,EAAoC;AAClC,SAAO3B,KAAK,CAACwB,MAAN,CAAavB,KAAb,IAAsBD,KAAK,CAACwB,MAAN,CAAavB,KAAb,CAAmBpB,MAAnB,GAA4B8C,MAAzD;AACD;;AAED,SAASlB,kBAAT,CAA4BvD,KAA5B,EAAmCC,WAAnC,EAAgDC,UAAhD,EAA4DC,IAA5D,EAAkEE,MAAlE,EAAyE;AACvE,MAAM+D,OAAO,GAAG,IAAIC,IAAJ,CAASlE,IAAT,CAAhB,CADuE,CACvC;;AAChC,MAAM+D,KAAK,GAAGC,cAAc,EAA5B,CAFuE,CAEvC;;AAChC,MAAGnE,KAAK,IAAIA,KAAK,CAAC2B,MAAN,GAAe,CAA3B,EAA6B;AAAG;AAC9B,QAAG1B,WAAW,IAAIA,WAAW,CAAC0B,MAAZ,GAAqB,EAAvC,EAA0C;AAAE;AAC1C,UAAGzB,UAAU,IAAIA,UAAU,CAACyB,MAAX,GAAoB,CAArC,EAAuC;AAAE;AACvC,YAAGyC,OAAO,IAAIF,KAAK,IAAIE,OAAvB,EAAgC;AAAE;AAChC,cAAG/D,MAAH,EAAU;AAAE;AACV,mBAAO,IAAP,CADQ,CACK;AACd;AACF;AACF;AACF;AACF;;AACD,SAAO,KAAP,CAduE,CAczD;AACf,EAED;;;AACA,IAAMqE,gBAAgB,GAAG7C,QAAQ,CAACC,aAAT,CAAuB,mBAAvB,CAAzB,EAAsE;;AACtE,IAAM6C,WAAW,GAAG9C,QAAQ,CAACC,aAAT,CAAuB,0BAAvB,CAApB,EAAwE;;AACxE4C,gBAAgB,CAAC7B,gBAAjB,CAAkC,OAAlC,EAA2C+B,UAA3C,GAAwD;;AACxD,SAASA,UAAT,GAAqB;AACnBC,EAAAA,QAAQ,GADW,CACP;;AACZjC,EAAAA,WAAW,CAACrC,KAAZ,CAAkBuE,OAAlB,CAA0B,UAAAjE,IAAI;AAAA,WAAIkE,aAAa,CAAClE,IAAD,CAAjB;AAAA,GAA9B,EAFmB,CAEqC;;AACxD8D,EAAAA,WAAW,CAACK,SAAZ,aAA2BpC,WAAW,CAACrC,KAAZ,CAAkBoB,MAA7C,EAHmB,CAGoC;AACxD,EAED;;;AACA,IAAMsD,WAAW,GAAGpD,QAAQ,CAACC,aAAT,CAAuB,cAAvB,CAApB,EAA4D;;AAC5DmD,WAAW,CAACpC,gBAAZ,CAA6B,OAA7B,EAAsC,YAAU;AAAE;AAChDqC,EAAAA,gBAAgB,CAAC,MAAD,CAAhB,CAD8C,CACpB;AAC3B,CAFD,GAIA;;AACA,IAAMC,eAAe,GAAGtD,QAAQ,CAACC,aAAT,CAAuB,kBAAvB,CAAxB,EAAoE;;AACpEqD,eAAe,CAACtC,gBAAhB,CAAiC,OAAjC,EAA0C,YAAU;AAAE;AACpDqC,EAAAA,gBAAgB,CAAC,WAAD,CAAhB,CADkD,CACnB;AAChC,CAFD,GAIA;;AACA,IAAME,iBAAiB,GAAGvD,QAAQ,CAACC,aAAT,CAAuB,oBAAvB,CAA1B,EAAwE;;AACxEsD,iBAAiB,CAACvC,gBAAlB,CAAmC,OAAnC,EAA4C,YAAU;AAAE;AACtDqC,EAAAA,gBAAgB,CAAC,aAAD,CAAhB,CADoD,CACnB;AAClC,CAFD,GAIA;;AACA,IAAMG,WAAW,GAAGxD,QAAQ,CAACC,aAAT,CAAuB,cAAvB,CAApB,EAA4D;;AAC5DuD,WAAW,CAACxC,gBAAZ,CAA6B,OAA7B,EAAsC,YAAU;AAAE;AAChDqC,EAAAA,gBAAgB,CAAC,OAAD,CAAhB,CAD8C,CACnB;AAC5B,CAFD;;AAKA,SAASA,gBAAT,CAA0B7E,MAA1B,EAAiC;AAC/BwE,EAAAA,QAAQ,GADuB,CACnB;;AACZjC,EAAAA,WAAW,CAACrC,KAAZ,CAAkBuE,OAAlB,CAA0B,UAAUjE,IAAV,EAAe;AAAE;AACzC,QAAIR,MAAM,KAAKQ,IAAI,CAACR,MAApB,EAA2B;AAAC0E,MAAAA,aAAa,CAAClE,IAAD,CAAb;AAAoB;;AAAA;AACjD,GAFD;AAGD;;AAED,IAAMO,aAAa,GAAG,SAAhBA,aAAgB,CAACP,IAAD;AAAA,SAAU;AAC9B+B,IAAAA,WAAW,CAACrC,KAAZ,CAAkB+E,SAAlB,CAA4B,UAAAC,WAAW;AAAA,aAAKA,WAAW,CAACxF,EAAZ,IAAkBc,IAAI,CAACd,EAA5B;AAAA,KAAvC;AADoB;AAAA,CAAtB,EAC2E;;;AAE3E,SAASyB,WAAT,GAAsB;AACpBmD,EAAAA,WAAW,CAACK,SAAZ,aAA2BpC,WAAW,CAACrC,KAAZ,CAAkBoB,MAA7C,EADoB,CACmC;;AACvDsD,EAAAA,WAAW,CAACnD,aAAZ,CAA0B,MAA1B,EAAkCkD,SAAlC,aAA+CpC,WAAW,CAACrC,KAAZ,CAAkBiF,MAAlB,CAAyB,UAAA3E,IAAI;AAAA,WAAIA,IAAI,CAACR,MAAL,KAAgB,MAApB;AAAA,GAA7B,EAAyDsB,MAAxG,EAFoB,CAE8F;;AAClHwD,EAAAA,eAAe,CAACrD,aAAhB,CAA8B,MAA9B,EAAsCkD,SAAtC,aAAmDpC,WAAW,CAACrC,KAAZ,CAAkBiF,MAAlB,CAAyB,UAAA3E,IAAI;AAAA,WAAIA,IAAI,CAACR,MAAL,KAAgB,WAApB;AAAA,GAA7B,EAA8DsB,MAAjH,EAHoB,CAGuG;;AAC3HyD,EAAAA,iBAAiB,CAACtD,aAAlB,CAAgC,MAAhC,EAAwCkD,SAAxC,aAAqDpC,WAAW,CAACrC,KAAZ,CAAkBiF,MAAlB,CAAyB,UAAA3E,IAAI;AAAA,WAAIA,IAAI,CAACR,MAAL,KAAgB,aAApB;AAAA,GAA7B,EAAgEsB,MAArH,EAJoB,CAI2G;;AAC/H0D,EAAAA,WAAW,CAACvD,aAAZ,CAA0B,MAA1B,EAAkCkD,SAAlC,aAA+CpC,WAAW,CAACrC,KAAZ,CAAkBiF,MAAlB,CAAyB,UAAA3E,IAAI;AAAA,WAAIA,IAAI,CAACR,MAAL,KAAgB,OAApB;AAAA,GAA7B,EAA0DsB,MAAzG,EALoB,CAK+F;AACpH;;AAED,SAASN,WAAT,GAAsB;AACpBwD,EAAAA,QAAQ,GADY,CACP;;AACb,MAAI9D,UAAU,GAAGC,IAAI,CAACC,KAAL,CAAWwE,MAAM,CAAC/E,YAAP,CAAoBC,OAApB,CAA4B,SAA5B,CAAX,KAAsDiC,WAAW,CAACrC,KAAnF;AACAQ,EAAAA,UAAU,CAAC+D,OAAX,CAAmB,UAAAjE,IAAI;AAAA,WAAIkE,aAAa,CAAClE,IAAD,CAAjB;AAAA,GAAvB,EAHoB,CAG6B;AAClD;;AAED,SAASgE,QAAT,GAAmB;AACjBnC,EAAAA,aAAa,CAACsC,SAAd,GAA0B,EAA1B,CADiB,CACa;AAC/B;;AAED,SAASD,aAAT,CAAuBlE,IAAvB,EAA4B;AAAG;AAE7B;AACA,MAAM6E,IAAI,8CACkB7E,IAAI,CAACd,EADvB,gMAKoCc,IAAI,CAACb,KALzC,8DAOgBa,IAAI,CAACd,EAPrB,8GAOqHc,IAAI,CAACd,EAP1H,oSAc6Bc,IAAI,CAACV,IAdlC,yGAiBQU,IAAI,CAACT,IAjBb,2IAqB+BS,IAAI,CAACR,MArBpC,gBAqB+CQ,IAAI,CAACR,MArBpD,2GAyBAQ,IAAI,CAACX,UAzBL,+2BAwCOW,IAAI,CAACd,EAxCZ,mGAyCAc,IAAI,CAACZ,WAzCL,qCAAV;AA8CD,MAAM0F,WAAW,GAAG9D,QAAQ,CAAC+D,WAAT,GAAuBC,wBAAvB,CAAgDH,IAAhD,CAApB,CAjD2B,CAiDgD;;AAE3E,MAAMI,cAAc,GAAGH,WAAW,CAAC7D,aAAZ,CAA0B,iBAA1B,CAAvB,CAnD2B,CAmD0C;;AACpEgE,EAAAA,cAAc,CAACjD,gBAAf,CAAgC,OAAhC,EAAyC,YAAU;AAAE;AACnDvB,IAAAA,mBAAmB,GAD8B,CAC1B;;AACvBC,IAAAA,gBAAgB,GAFiC,CAE7B;;AACpBkB,IAAAA,QAAQ,CAACO,SAAT,CAAmBC,GAAnB,CAAuBpC,IAAI,CAACd,EAA5B,EAHiD,CAGhB;;AACjC6B,IAAAA,SAAS,CAACmB,KAAV,GAAkBlC,IAAI,CAACb,KAAvB,CAJiD,CAInB;;AAC9B+B,IAAAA,eAAe,CAACgB,KAAhB,GAAwBlC,IAAI,CAACZ,WAA7B,CALiD,CAKP;;AAC1C+B,IAAAA,cAAc,CAACe,KAAf,GAAuBlC,IAAI,CAACX,UAA5B,CANiD,CAMT;;AACxC+B,IAAAA,WAAW,CAACc,KAAZ,GAAoBlC,IAAI,CAACV,IAAzB,CAPiD,CAOlB;;AAC/B+B,IAAAA,WAAW,CAACa,KAAZ,GAAoBlC,IAAI,CAACT,IAAzB,CARiD,CAQlB;;AAE/B,YAAQS,IAAI,CAACR,MAAb;AAAuB;AACrB,WAAK,MAAL;AAAa8B,QAAAA,IAAI,CAACe,OAAL,GAAe,IAAf;AACb;;AACA,WAAK,WAAL;AAAkBd,QAAAA,MAAM,CAACc,OAAP,GAAkB,IAAlB;AAClB;;AACA,WAAK,aAAL;AAAoBb,QAAAA,UAAU,CAACa,OAAX,GAAsB,IAAtB;AACpB;;AACA;AAASZ,QAAAA,IAAI,CAACY,OAAL,GAAgB,IAAhB;AAAsB;AAPjC;AAUD,GApBD;AAsBA,MAAM6C,gBAAgB,GAAGJ,WAAW,CAAC7D,aAAZ,CAA0B,mBAA1B,CAAzB,CA1E0B,CA0E+C;;AACzEiE,EAAAA,gBAAgB,CAAClD,gBAAjB,CAAkC,OAAlC,EAA2C,YAAU;AAAE;AACrDD,IAAAA,WAAW,CAACoD,UAAZ,CAAuBnF,IAAvB,EADmD,CACrB;;AAC9BkF,IAAAA,gBAAgB,CAACE,OAAjB,CAAyB,UAAzB,EAAqC9C,MAArC,GAFmD,CAEJ;AAChD,GAHD;AAKA,MAAM+C,QAAQ,GAAGP,WAAW,CAAC7D,aAAZ,CAA0B,qCAA1B,CAAjB,CAhF0B,CAgFyD;;AACnF,MAAMqE,aAAa,GAAGtE,QAAQ,CAACC,aAAT,CAAuB,gBAAvB,CAAtB,CAjF0B,CAiFsC;;AAChEqE,EAAAA,aAAa,CAACtD,gBAAd,CAA+B,OAA/B,EAAwCuD,eAAxC,EAlF0B,CAkFgC;;AAE1D,WAASA,eAAT,CAA0BtD,KAA1B,EAAgC;AAAE;AAC7B,QAAIoD,QAAQ,CAAChD,OAAb,EAAqB;AAAE;AACtBN,MAAAA,WAAW,CAACoD,UAAZ,CAAuBnF,IAAvB,EADoB,CACU;;AAC5BqF,MAAAA,QAAQ,CAACD,OAAT,CAAiB,UAAjB,EAA6B9C,MAA7B,GAFkB,CAEqB;;AACvCgD,MAAAA,aAAa,CAACE,mBAAd,CAAkC,OAAlC,EAA2CD,eAA3C,EAHkB,CAG2C;AAC3D;AACF;;AAER1D,EAAAA,aAAa,CAAC4D,MAAd,CAAqBX,WAArB,EA5F0B,CA4FS;AAEpC;;AAEDhC,CAAC,CAAC,YAAY;AACZA,EAAAA,CAAC,CAAC,yBAAD,CAAD,CAA6B4C,OAA7B;AACD,CAFA,CAAD,EAIA;;AACA,IAAIC,CAAC,GAAG,IAAInC,IAAJ,EAAR,EAAoB;;AAEpB,IAAIoC,OAAO,GAAG,IAAIC,KAAJ,CAAU,CAAV,CAAd,EAA4B;;AAC5BD,OAAO,CAAC,CAAD,CAAP,GAAa,QAAb;AACAA,OAAO,CAAC,CAAD,CAAP,GAAa,QAAb;AACAA,OAAO,CAAC,CAAD,CAAP,GAAa,SAAb;AACAA,OAAO,CAAC,CAAD,CAAP,GAAa,WAAb;AACAA,OAAO,CAAC,CAAD,CAAP,GAAa,UAAb;AACAA,OAAO,CAAC,CAAD,CAAP,GAAa,QAAb;AACAA,OAAO,CAAC,CAAD,CAAP,GAAa,UAAb;AACA,IAAIE,GAAG,GAAGF,OAAO,CAACD,CAAC,CAACI,MAAF,EAAD,CAAjB,EAA+B;;AAE/B,IAAIC,MAAM,GAAG,CAAC,SAAD,EAAY,UAAZ,EAAwB,OAAxB,EAAiC,OAAjC,EAA0C,KAA1C,EAAiD,MAAjD,EAAyD,MAAzD,EAAiE,QAAjE,EAA2E,WAA3E,EAAwF,SAAxF,EAAmG,UAAnG,EAA+G,UAA/G,CAAb,EAAyI;;AACzI,IAAIC,UAAU,GAAGD,MAAM,CAACL,CAAC,CAACO,QAAF,EAAD,CAAvB,EAAuC;;AAEvC,IAAMC,GAAG,GAAG,SAANA,GAAM,CAASC,CAAT,EAAY;AAAE;AACxB,MAAIA,CAAC,GAAG,CAAJ,IAASA,CAAC,GAAG,EAAjB,EAAqB,OAAO,IAAP;;AACrB,UAAQA,CAAC,GAAG,EAAZ;AACE,SAAK,CAAL;AAAS,aAAO,IAAP;;AACT,SAAK,CAAL;AAAS,aAAO,IAAP;;AACT,SAAK,CAAL;AAAS,aAAO,IAAP;;AACT;AAAS,aAAO,IAAP;AAJX;AAMD,CARD;;AAUA,IAAIC,SAAS,GAAGV,CAAC,CAACW,OAAF,EAAhB;AACA,IAAIC,IAAI,GAAGZ,CAAC,CAACa,WAAF,EAAX;AACA,IAAIC,aAAa,GAAGJ,SAAS,GAAGF,GAAG,CAACE,SAAD,CAAf,GAA6B,GAA7B,GAAmCJ,UAAnC,GAAgD,GAAhD,GAAsDM,IAAtD,GAA6D,WAA7D,GAA2ET,GAA3E,GAAiF,GAArG;AACA9E,QAAQ,CAACC,aAAT,CAAuB,YAAvB,EAAqCkD,SAArC,GAAiDsC,aAAjD;AAEAjG,WAAW","file":"script.75da7f30.js","sourceRoot":"..","sourcesContent":["export default class Task {\n    constructor(id, title, description, assignedTo, date, time, status) {\n        this.id = id;\n        this.title = title;\n        this.description = description;\n        this.assignedTo = assignedTo;\n        this.date = date;\n        this.time = time;\n        this.status = status;\n    }\n  }","import Task from \"./task.js\";\n\nexport default class TaskManager {\n    constructor() {\n      this.tasks=[];\n  \n      // Local Storage\n      this.taskId = parseInt(localStorage.getItem('taskId')) || 1;\n      localStorage.setItem('taskId',this.taskId);\n    }\n  \n    addTask(title, description, assignedTo, date, time, status){ // take all input fields parameters\n      this.taskId++; // generated id = id + 1\n      const task = new Task(this.taskId, title, description, assignedTo, date, time, status); // assign all values including id to task\n      this.tasks.push(task); // push task to the tasks array\n      // refreshPage(); // refresh the page (clears inner HTML and list the updated array)\n      // clearAllFieldValues(); // clear all field value and assign null to fields and false to radio button value\n      // clearValidations(); // removes all is-invalid and is-valid classes to the span elements\n      // statusStats() // updates status counter\n  \n      // Add to local storage\n      localStorage.setItem('taskId', this.taskId);\n      let mynewtasks = JSON.parse(localStorage.getItem(\"mytasks\")) || [];\n      mynewtasks.push(task);\n      localStorage.setItem(\"mytasks\", JSON.stringify(mynewtasks));\n    }\n  \n    editTask(task){\n      this.tasks.splice(findTaskIndex(task),1,task); // at position of the index, remove 1 item and add task\n      refreshPage(); // clear innerHTML and add the updated array\n      clearAllFieldValues(); // clear all field value and make modal empty\n      clearValidations(); // clears all validation classes and span\n      statusStats(); // update status counter button on HTML\n    }\n  \n    deleteTask(task){\n      let taskIndex = findTaskIndex(task);\n      let id = this.tasks[taskIndex].id;\n      this.tasks.splice(taskIndex,1); // deletes one index from the tasks array that matched the taskIndex\n      \n      // Local Storage - Delete\n      let mynewtasks = JSON.parse(localStorage.getItem(\"mytasks\"));\n      //alert(mynewtasks.length);\n      for (let i = 0; i < mynewtasks.length; i++) {\n               if (mynewtasks[i].id == id) {\n               mynewtasks.splice(i, 1);\n               localStorage.setItem(\"mytasks\",JSON.stringify(mynewtasks));\n               break;\n          }\n      }\n  \n      refreshPage(); // clear innerHTML and creates a list of all the items in the array\n      statusStats(); // update status counter buttons\n    }\n  \n  }\n  ","import TaskManager from \"./taskmanager.js\";\n\n// Input fields in the new task modal\nconst taskTitle = document.querySelector('#taskTitle');\nconst taskDescription = document.querySelector('#taskDescription');\nconst taskAssignedTo = document.querySelector('#taskAssignedTo');\nconst taskDueDate = document.querySelector('#taskDueDate');\nconst taskDueTime = document.querySelector('#taskDueTime');\n\n//Status radio button\nconst done = document.querySelector('#statusDone'); // Done\nconst review = document.querySelector('#statusReview'); // Review\nconst inProgress = document.querySelector('#statusInProgress'); // In Progress\nconst toDo = document.querySelector('#statusToDo'); // To Do\n\nconst newToDo = document.querySelector(\"#newToDo\"); // input box for new task\nconst openNewTask = document.querySelector(\"#openForm\"); // add task button to open new task form\nconst taskForm = document.querySelector(\"#taskForm\"); // new task form\n\nconst taskContainer = document.querySelector(\"#tasks\"); // container to display tasks\nconst taskModalForm = document.querySelector(\"#taskForm\"); // new task form\n\n// class Task {\n//   constructor(id, title, description, assignedTo, date, time, status) {\n//       this.id = id;\n//       this.title = title;\n//       this.description = description;\n//       this.assignedTo = assignedTo;\n//       this.date = date;\n//       this.time = time;\n//       this.status = status;\n//   }\n// }\n\n// export default class TaskManager {\n//   constructor() {\n//     this.tasks=[];\n\n//     // Local Storage\n//     this.taskId = parseInt(localStorage.getItem('taskId')) || 1;\n//     localStorage.setItem('taskId',this.taskId);\n//   }\n\n//   addTask(title, description, assignedTo, date, time, status){ // take all input fields parameters\n//     this.taskId++; // generated id = id + 1\n//     const task = new Task(this.taskId, title, description, assignedTo, date, time, status); // assign all values including id to task\n//     this.tasks.push(task); // push task to the tasks array\n//     // refreshPage(); // refresh the page (clears inner HTML and list the updated array)\n//     // clearAllFieldValues(); // clear all field value and assign null to fields and false to radio button value\n//     // clearValidations(); // removes all is-invalid and is-valid classes to the span elements\n//     // statusStats() // updates status counter\n\n//     // Add to local storage\n//     localStorage.setItem('taskId', this.taskId);\n//     let mynewtasks = JSON.parse(localStorage.getItem(\"mytasks\")) || [];\n//     mynewtasks.push(task);\n//     localStorage.setItem(\"mytasks\", JSON.stringify(mynewtasks));\n//   }\n\n//   editTask(task){\n//     this.tasks.splice(findTaskIndex(task),1,task); // at position of the index, remove 1 item and add task\n//     refreshPage(); // clear innerHTML and add the updated array\n//     clearAllFieldValues(); // clear all field value and make modal empty\n//     clearValidations(); // clears all validation classes and span\n//     statusStats(); // update status counter button on HTML\n//   }\n\n//   deleteTask(task){\n//     let taskIndex = findTaskIndex(task);\n//     let id = this.tasks[taskIndex].id;\n//     this.tasks.splice(taskIndex,1); // deletes one index from the tasks array that matched the taskIndex\n    \n//     // Local Storage - Delete\n//     let mynewtasks = JSON.parse(localStorage.getItem(\"mytasks\"));\n//     //alert(mynewtasks.length);\n//     for (let i = 0; i < mynewtasks.length; i++) {\n//              if (mynewtasks[i].id == id) {\n//              mynewtasks.splice(i, 1);\n//              localStorage.setItem(\"mytasks\",JSON.stringify(mynewtasks));\n//              break;\n//         }\n//     }\n\n//     refreshPage(); // clear innerHTML and creates a list of all the items in the array\n//     statusStats(); // update status counter buttons\n//   }\n\n// }\n\nconst taskManager = new TaskManager(taskContainer);                       // created an instance of class Task Manager\n\n// New Task Input Box On Page Load\nopenNewTask.addEventListener(\"click\", function(event){ // add button clicked\n  clearAllFieldValues(); // all fields are cleared to null and radio button false\n  clearValidations(); // validation span cleared from the form\n  taskTitle.value = newToDo.value; // value from input box passed to new task title\n  if(taskTitle.value && taskTitle.value.length > 8){\n    taskTitle.classList.add(\"is-valid\"); // if task title is more than 8 characters, is-valid class assigned\n  } else {\n    taskTitle.classList.add(\"is-invalid\"); // else task title is-invalid is assigned\n  }\n  newToDo.value = null; //input box becomes null\n});\n\nfunction clearAllFieldValues(){ // clears all fields value and assigned false (fresh)\n  taskTitle.value = null;\n  taskDescription.value = null;\n  taskAssignedTo.value = null;\n  taskDueDate.value = null;\n  taskDueTime.value = null;\n  \n  done.checked = false;\n  review.checked = false;\n  inProgress.checked = false;\n  toDo.checked = true;\n}\n\nfunction clearValidations(){ // removes both is-invalid and is-valid class from all the fields\n  taskTitle.classList.remove(\"is-invalid\", \"is-valid\");\n  taskDescription.classList.remove(\"is-invalid\", \"is-valid\");\n  taskAssignedTo.classList.remove(\"is-invalid\", \"is-valid\");\n  taskDueDate.classList.remove(\"is-invalid\", \"is-valid\");\n}\n\ntaskModalForm.addEventListener(\"submit\", saveButtonClicked); // on clicking submit button on the new task form, saveButtonClicked function called\n\nfunction saveButtonClicked(event){\n  event.preventDefault(); // prevent default action for the submit button to trigger\n  const title = taskTitle.value; // assign values from input box to the array\n  const description = taskDescription.value;\n  const assignedTo = taskAssignedTo.value;\n  const date = taskDueDate.value;\n  const time = taskDueTime.value;\n  const status = selectedStatus(); // returns value for the radio button depending on the selection\n\n  if(validationTaskForm(title, description, assignedTo, date, status)){ // check all parameters passed to this function\n    if(!taskForm.classList.item(0)){ // if index does not match, go to add task\n      taskManager.addTask(title, description, assignedTo, date, time, status); // add task function\n      refreshPage(); // refresh the page (clears inner HTML and list the updated array)\n      clearAllFieldValues(); // clear all field value and assign null to fields and false to radio button value\n      clearValidations(); // removes all is-invalid and is-valid classes to the span elements\n      statusStats() // updates status counter\n    } else {\n      const id = taskForm.classList.item(0); // assigns array position 0 to the id (id=0)\n      const task = {id, title, description, assignedTo, date, time, status};\n      taskManager.editTask(task); // if index match, go to edit task\n      refreshPage(); // refresh the page (clears inner HTML and list the updated array)\n      clearAllFieldValues(); // clear all field value and assign null to fields and false to radio button value\n      clearValidations(); // removes all is-invalid and is-valid classes to the span elements\n      statusStats() // updates status counter\n\n    // Local Storage Update Task\n  \n    let mynewtasks = JSON.parse(localStorage.getItem(\"mytasks\"));\n    // alert(mynewtasks.length);\n    for (let i = 0; i < mynewtasks.length; i++) {\n      // alert(mynewtasks[i].id);\n      // alert(id);\n      if (mynewtasks[i].id == id) {\n        // alert(\"Inside For Loop\");\n        mynewtasks[i].title = title;\n        mynewtasks[i].description = description;\n        mynewtasks[i].assignedTo = assignedTo;\n        mynewtasks[i].date = date;\n        mynewtasks[i].time = time;\n        mynewtasks[i].status = status;\n        localStorage.setItem(\"mytasks\", JSON.stringify(mynewtasks));\n        break;\n      }\n    }\n\n    taskForm.classList.remove(`${id}`); // removed the class id from the task form\n    }\n    $(\"#newTaskInput\").modal(\"hide\"); // new task modal hidden\n  }  else {\n    alert(\"Please complete all fields.\"); // else alert to complete all fields\n  }\n    refreshPage(); // clear innerHTML and creates a list of all the items in the array\n    statusStats(); // update status counter buttons\n}\n\nconst formCancel=document.querySelector(\"#cancelButton\"); // assign modal cancel button to the variable\nconst formClose=document.querySelector(\"#close\"); // assign modal close button to the variable\n\nformCancel.addEventListener(\"click\", function(event){\n  const id = taskForm.classList.item(0); // assign array index to the modal\n  if (id){\n  taskForm.classList.remove(`${id}`); // remove the id class from the modal\n  }\n});\n\nformClose.addEventListener(\"click\", function(event){\n  const id = taskForm.classList.item(0); // assign array index to the modal\n  if (id){\n  taskForm.classList.remove(`${id}`); // remove the id class from the modal\n  }\n});\n\n// Status return\nfunction selectedStatus(){\n\n  if (done.checked){\n    return done.value; // returns values of \"Done\"\n  } else if (review.checked) {\n    return review.value; // returns value of \"In Review\"\n  } else if (inProgress.checked) {\n    return inProgress.value; // returns value of \"status-InProgress\"\n  } else if (toDo.checked) {\n    return toDo.value; // returns value of \"Done\"\n  } else {\n    return false;\n  }\n}\n\n//  Validation on input for boolean and assign class accordingly (is-invalid // is-valid)\n\n// checks if the title is more than 8 characters\ntaskTitle.addEventListener(\"input\", function(event){ \n  validation(notEmptyLongerThan(8));\n});\n\n// checks if the task description is more than 15 characters\ntaskDescription.addEventListener(\"input\", function(event){\n  validation(notEmptyLongerThan(15));\n});\n\n// checks if the assigned to is more than 8 characters\ntaskAssignedTo.addEventListener(\"input\", function(event){\n  validation(notEmptyLongerThan(8));\n});\n\n// checks if the due date is in the future\ntaskDueDate.addEventListener(\"input\", function(event){\n  const today = todayConvertor(); // get today's date\n  const dueDate = new Date(event.target.value); // get due date\n  validation(today <= dueDate); // returns value of boolean and assign class\n})\n\n// returns today's date with hours\nfunction todayConvertor(){\n  const today = new Date(); // get today's date \n  return today.setHours(0,0,0,0); // get current time\n}\n\n// validations boolean and remove/add class to element accordingly\nfunction validation(boolean){\n  if(boolean){\n    event.target.classList.remove(\"is-invalid\"); // remove class from element\n    event.target.classList.add(\"is-valid\"); // add class to element\n  } else {\n    event.target.classList.remove(\"is-valid\"); // remove class from element\n    event.target.classList.add(\"is-invalid\"); // add class to elements\n  }\n};\n\n//validation to check if value and length of characters are more than the (number)\nfunction notEmptyLongerThan (number){\n  return event.target.value && event.target.value.length > number;\n}\n\nfunction validationTaskForm(title, description, assignedTo, date, status){\n  const dueDate = new Date(date); // assign today's date by default to calendar picker\n  const today = todayConvertor(); // assign current time by default\n  if(title && title.length > 8){  // if title length is more than 8 characters\n    if(description && description.length > 15){ // if description is more than 15 characters\n      if(assignedTo && assignedTo.length > 8){ // if assignedTo is more than 8 characters\n        if(dueDate && today <= dueDate ){ // **\n          if(status){ // if status is true\n            return true; // validationTaskForm returns true\n          }  \n        }\n      }\n    }\n  }\n  return false; // else return false\n}\n\n// Total Counter - All Task\nconst counterTotalTask = document.querySelector(\"#counterTotalTask\"); // assign All Tasks button to counterTotalTask\nconst totalNumber = document.querySelector(\"#counterTotalTask > span\"); // assign span inside All Task Counter to totalNumber\ncounterTotalTask.addEventListener(\"click\", getAllTask); // onclick of All Tasks button\nfunction getAllTask(){\n  clearAll(); // clears innerHTML \n  taskManager.tasks.forEach(task => addTaskToPage(task)); // displays each task from the array\n  totalNumber.innerHTML = `${taskManager.tasks.length}`; // All Tasks total number is the length of the array\n}\n\n// Counter for Done\nconst counterDone = document.querySelector(\"#counterDone\"); // assign Done button to counterDone variable\ncounterDone.addEventListener(\"click\", function(){ // onclick Done button\n  filterTaskStatus(\"Done\"); // clears innerHTML, display all tasks with status === done\n});\n\n// Counter for Review\nconst counterInReview = document.querySelector(\"#counterInReview\"); // assign In Review button to counterInReview variable\ncounterInReview.addEventListener(\"click\", function(){ // onclick In Review button\n  filterTaskStatus(\"In Review\"); // clears innerHTML, display all tasks with status === review\n});\n\n// Counter for In Progress\nconst counterInProgress = document.querySelector(\"#counterInProgress\"); // assign In Progress button to counterInProgress variable\ncounterInProgress.addEventListener(\"click\", function(){ // onclick In Progress button\n  filterTaskStatus(\"In Progress\"); // clears innerHTML, display all tasks with status === inProgress\n});\n\n// Counter for To Do\nconst counterToDo = document.querySelector(\"#counterToDo\"); // assign To Do button to counterToDo variable\ncounterToDo.addEventListener(\"click\", function(){ // onclick To Do button\n  filterTaskStatus(\"To Do\"); // clears innerHTML, display all tasks with status === To Do\n});\n\n\nfunction filterTaskStatus(status){\n  clearAll(); // clears innerHTML\n  taskManager.tasks.forEach(function (task){ // display all task when passed parameter matches the status in the array\n    if (status === task.status){addTaskToPage(task)};\n  });\n}\n\nconst findTaskIndex = (task) => // finding index of a task\n  taskManager.tasks.findIndex(taskInArray => (taskInArray.id == task.id)); // returns the first index that matches the parameter\n\nfunction statusStats(){\n  totalNumber.innerHTML = `${taskManager.tasks.length}`; // gets total tasks in the array\n  counterDone.querySelector(\"span\").innerHTML=`${taskManager.tasks.filter(task => task.status === \"Done\").length}`; // done status counter\n  counterInReview.querySelector(\"span\").innerHTML=`${taskManager.tasks.filter(task => task.status === \"In Review\").length}`; // in review status counter\n  counterInProgress.querySelector(\"span\").innerHTML=`${taskManager.tasks.filter(task => task.status === \"In Progress\").length}`; // in progress status counter\n  counterToDo.querySelector(\"span\").innerHTML=`${taskManager.tasks.filter(task => task.status === \"To Do\").length}`; // to do status counter\n}\n\nfunction refreshPage(){\n  clearAll();  // clear innerHTML\n  let mynewtasks = JSON.parse(window.localStorage.getItem('mytasks')) || taskManager.tasks;\n  mynewtasks.forEach(task => addTaskToPage(task)); // list all current tasks from array\n}\n\nfunction clearAll(){\n  taskContainer.innerHTML = \"\"; // clears innerHTML\n}\n\nfunction addTaskToPage(task){  // adds HTML element to the page\n\n  // assign all the HTML Element code to html\n  const html = `\n  <div class=\"task\" id=\"task${task.id}\">\n    <div class=\"row\">\n      <div class=\"taskTitle col-lg-4 order-1 col-sm\">\n          <p class=\"text-left d-inline\">\n            <span class=\"h6 font-weight-bold\">${task.title}</span> \n          \n            <a href=\"#task${task.id}Description\" class=\"text-primary ml-1 pl-0 small\" data-toggle=\"collapse\" data-target=\"#task${task.id}Description\"><i class=\"fas fa-plus-circle fa-lg iconFloat\"></i></a>\n          </p>\n      </div>\n      \n      <div class=\"col-lg-8 order-2\">\n        <ul class=\"row taskSummary\">\n          <li class=\"order-3 col-sm col-md\">\n            <span class=\"spanDateTime\">${task.date}</span>\n          </li>\n          <li class=\"order-4 col-sm col-md\">\n            <span>${task.time}</span>\n          </li>\n        \n          <li class=\"order-5 col-sm col-md\">\n            <span class=\"badge badgeColor${task.status}\">${task.status}</span>\n          </li>\n        \n          <li class=\"order-6 col-sm col-md\">\n          ${task.assignedTo}\n          </li>\n        \n          <li class=\"order-7 col-sm col-md\">\n            <form class=\"removeBin\" action=\"\" method=\"post\">\n              <a href=\"#newTaskInput\" id=\"editTaskButton\" role=button class=\"d-inline btn btn-link ml-0 pl-0 mb-0 pb-0\" data-toggle=\"modal\" title=\"Edit Task\" data-target=\"#newTaskInput\">\n              <i class=\"fas fa-pen-square text-dark iconFloat fa-lg\"></i></a>\n              <input type=\"checkbox\" class=\"ml-2 pl-0 border border-info\">\n              <button type=\"button\" class=\"ml-3 pl-0 btn btn-link removeBin\" id=\"deleteSingleTask\" data-toggle=\"\" data-placement=\"top\" title=\"Delete This Task\"><i class=\"fas fa-trash-alt fa-lg iconFloat iconDelete \"></i>\n              </button>\n              </form>\n          </li>\n        </ul>\n      </div>\n    </div>\n    <div id=\"task${task.id}Description\" class=\"collapse order-2 order-lg-2 order-md-2 order-sm-2\">\n          ${task.description}\n    </div>\n    <hr>\n  </div>`;\n  \n const taskElement = document.createRange().createContextualFragment(html); // passing html fragment to the page\n \n const editTaskOnPage = taskElement.querySelector(\"#editTaskButton\"); // assign Edit Task button to a variable\n  editTaskOnPage.addEventListener(\"click\", function(){ // onclick of edit task button\n    clearAllFieldValues(); // clear all field values from modal form\n    clearValidations(); // clear all validation spans\n    taskForm.classList.add(task.id); // task form class added with the task id index\n    taskTitle.value = task.title; // task title assigned to taskTitle.value\n    taskDescription.value = task.description; // task description assigned to taskAssigned.value\n    taskAssignedTo.value = task.assignedTo; // task assignedTo assigned to taskAssignedTo.value\n    taskDueDate.value = task.date; // task date assigned to taskDueDate.value\n    taskDueTime.value = task.time; // task time assigned to taskDueTime.value\n    \n    switch (task.status) { // checks if the task status matches with the case, if not default is selected\n      case 'Done': done.checked = true;\n      break;\n      case 'In Review': review.checked  = true;\n      break;\n      case 'In Progress': inProgress.checked  = true;\n      break;\n      default: toDo.checked  = true; // by default, To Do is selected \n    }\n\n  });\n\n  const deleteTaskOnPage = taskElement.querySelector('#deleteSingleTask'); // deletes single task on the page\n  deleteTaskOnPage.addEventListener(\"click\", function(){ // onclick of the delete single task icon\n    taskManager.deleteTask(task); // deletes the task of the given index\n    deleteTaskOnPage.closest(\"div.task\").remove(); // removes closed div in the task class\n  });\n\n  const checkbox = taskElement.querySelector('.removeBin > input[type=\"checkbox\"]'); // assign checkbox in the removeBin class to checkbox variable\n  const clearSelected = document.querySelector(\"#clearSelected\"); // assign Clear Selected button to clearSelected\n  clearSelected.addEventListener('click', checkboxClicked); // onclick of clear selected button, executed checkboxClicked function\n\n  function checkboxClicked (event){ // executed on Clear Selectd button onclick\n       if (checkbox.checked){ // if the checkbox is checked\n        taskManager.deleteTask(task); // deletes the task of the given index\n          checkbox.closest(\"div.task\").remove(); // removes the closes div in the task class\n          clearSelected.removeEventListener('click', checkboxClicked); // removes previously registered event listener\n           }\n         }\n         \n  taskContainer.append(taskElement); // append taskElement to the taskContainer in the HTML page\n  \n}\n\n$(function () {\n  $('[data-toggle=\"tooltip\"]').tooltip()\n})\n\n// Day and Date\nvar d = new Date(); // get the system date and store in variable\n\nvar weekday = new Array(7); // store 7 days of a week in an array\nweekday[0] = \"Sunday\";\nweekday[1] = \"Monday\";\nweekday[2] = \"Tuesday\";\nweekday[3] = \"Wednesday\";\nweekday[4] = \"Thursday\";\nweekday[5] = \"Friday\";\nweekday[6] = \"Saturday\";\nvar day = weekday[d.getDay()]; // get current day\n\nvar months = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"]; // store months in an array\nvar todayMonth = months[d.getMonth()]; // get current month\n\nconst nth = function(n) { // displays *st, *nd, *rd, *th depending on the date\n  if (n > 3 && n < 21) return 'th';\n  switch (n % 10) {\n    case 1:  return \"st\";\n    case 2:  return \"nd\";\n    case 3:  return \"rd\";\n    default: return \"th\";\n  }\n}\n\nvar todayDate = d.getDate();\nvar year = d.getFullYear();\nvar todayFullDate = todayDate + nth(todayDate) + \" \" + todayMonth + \" \" + year + \" - Happy \" + day + \"!\";\ndocument.querySelector(\"#todayDate\").innerHTML = todayFullDate;\n\nrefreshPage();"]}